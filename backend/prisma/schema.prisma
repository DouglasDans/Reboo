// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  books     BookAuthor[]
}

model Publisher {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Category {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  books     BookCategory[]
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  bio            String?
  profileImage   String?
  google_id      String?          @unique
  readingSession ReadingSession[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  collections Collection[]
  books       Book[]
}

model Collection {
  id               Int              @id @default(autoincrement())
  name             String
  backgroundColors String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  books            BookCollection[]

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Book {
  id               Int        @id @default(autoincrement())
  title            String
  isbn_10          String
  isbn_13          String
  totalPages       Int
  pagesRead        Int
  publicationDate  DateTime
  description      String
  status           BookStatus @default(NOT_STARTED)
  coverImage       String?
  highlightColor   String?
  language         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  authors        BookAuthor[]
  categories     BookCategory[]
  collections    BookCollection[]
  readingSession ReadingSession[]
}

enum BookStatus {
  BUY
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  GIVEN_UP
}

model BookAuthor {
  book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int
  author   Author @relation(fields: [authorId], references: [id])
  authorId Int

  @@id([bookId, authorId])
}

model BookCategory {
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([bookId, categoryId])
}

model BookCollection {
  book         Book       @relation(fields: [bookId], references: [id])
  bookId       Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int

  @@id([bookId, collectionId])
}

model ReadingSession {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  pagesRead Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book   Book @relation(fields: [bookId], references: [id])
  bookId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}
